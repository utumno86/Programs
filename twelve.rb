require 'prime'

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?
def factors_of(number)
  primes, powers = number.prime_division.transpose
  unless powers.nil?
    exponents = powers.map { |i| (0..i).to_a }
    divisors = exponents.shift.product(*exponents).map do |powers|
      primes.zip(powers).map { |prime, power| prime**power }.inject(:*)
    end
    divisors.sort.map { |div| [div, number / div] }
  else
    primes
  end
end

triangle_num = 0
divisors =[]

while divisors.length <= 500
  i = 1
  divisors = []
  triangle_num += i

  unless factors_of(triangle_num).nil?
    factors_of(triangle_num).each do |factor_set|
      divisors << factor_set[0]
    end
    puts "Number of divisors: #{divisors.length}"
  end
  i += 1
end

puts "Triangle number: #{triangle_number}"
