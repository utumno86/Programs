require 'prime'

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred
# divisors?

#Triangle Number: 184952099504  Index: 608197 Number of divisors: 20  Highest number of divisors so far: 448

def number_of_factors(number)
  primes, powers = number.prime_division.transpose
  divisors = 1
  unless powers.nil?
    powers.each do |power|
      power += 1
      divisors *= power
    end
    divisors
  end
end

puts 'You would like to find the first triangle number that has how many factors?'
highest_factors = gets.chomp.to_i

triangle_num = 1
divisors = 0
i = 1
high_factor_number = 0
while divisors <= highest_factors
  triangle_num += i
  unless number_of_factors(triangle_num).nil?
    divisors = number_of_factors(triangle_num)
    if divisors > high_factor_number
      high_factor_number = divisors
    end
    puts " Triangle Number: #{triangle_num}  Index: #{i} Number of divisors: #{divisors}  Highest number of divisors so far: #{high_factor_number} "
  end
  i += 1
end

puts " First triangle number with #{highest_factors} factors: #{triangle_num}"
